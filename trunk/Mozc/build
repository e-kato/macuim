#!/bin/sh

# usage
# ./build --apply-patch		# just apply patches
# ./build			# build and install
#
# ./build --clean-patch		# remove uim-mozc patches

top=`pwd`
os=`uname -s`
PATCH0=${top}/mozc-macosx.diff
PATCH1=${top}/gyp-macosx.diff
PATCH2=${top}/mozc-uim.diff
PATCH3=${top}/uim-mozc-xcodeproj.diff

dest="${top}/../Package/dest"
fwdir="/Library/Frameworks/UIM.framework/Versions/Current"
mozcdir="/Library/Mozc"
launchagentdir="/Library/LaunchAgents"
uim_build_dir="${top}/../UIM/uim"
target="MacUIM"

if [ ! -d depot_tools ]; then
	svn co http://src.chromium.org/svn/trunk/tools/depot_tools
fi

export PATH=$PATH:`pwd`/depot_tools
export PKG_CONFIG_PATH=/Library/Frameworks/UIM.framework/Versions/Current/lib/pkgconfig:$PKG_CONFIG_PATH

if [ ! -d mozc ]; then
	echo "pull mozc"
	mkdir mozc
	cd mozc
		gclient config http://mozc.googlecode.com/svn/trunk/src
		gclient sync
	cd -
fi

pushd mozc/src
	# apply patches
	if test -n "$1" && test $1 = "--apply-patch" ;then
		echo "apply patches"
		if [ -d unix/uim ]; then
			rm -rf unix/uim
		fi
		patch -p0 < ${PATCH2}
		(cd mozc_build_tools/gyp; patch -p0 < ${PATCH1})
		if [ ${os} = "Darwin" ]; then
			patch -p0 < ${PATCH0}
		fi
		exit
	fi

	# clean patches and exit
	if test -n "$1" && test $1 = "--clean-patch" ;then
		echo "cleanup patches"
		svn status . | grep "^M" | sed -e 's/^M//' | xargs svn revert
		svn status mozc_build_tools/gyp | grep "^M" | sed -e 's/^M//' | xargs svn revert
		rm -rf unix/uim/
		exit
	fi

	if test -n "$1" && test $1 = "--help" ;then
		cat <<HERE
# usage
# ./build --apply-patch		# just apply patches
# ./build			# build and install
#
# ./build --help		# show help
# ./build --clean-patch		# remove uim-mozc patches
HERE
		exit
	fi

	# check unix/uim
	if [ ! -d unix/uim ]; then
		echo "./build --apply-patch first"
		exit
	fi

	# gyp
	echo "generate rules"
	python build_mozc.py gyp
	# fix xcode project
	if [ ${os} = "Darwin" ]; then
		for i in macuim macfink
		do
			pushd unix/uim/uim-${i}.xcodeproj
			patch < ${PATCH3}
			popd
		done
	fi

	# build build_tools
	echo "build_tools"
	python build_mozc.py build_tools -c Release

	# build libuim-mozc.so
	echo "build"
	if [ ${os} = "Darwin" ]; then
		if [ ${target} = "MacUIM" ]; then
			python build_mozc.py build -c Release unix/uim/uim-macuim.gyp:uim-mozc
		else
			python build_mozc.py build -c Release unix/uim/uim-macfink.gyp:uim-mozc
		fi
	else
		python build_mozc.py build -c Release unix/uim/uim.gyp:uim-mozc
	fi
	python build_mozc.py build -c Release server/server.gyp:mozc_server

	if [ $? != 0 ]; then
		echo "failed"
		exit
	fi
popd

# install  
if [ ${os} = Darwin -a ${target} = "MacUIM" ]; then
	echo "install"
	mkdir -p ${dest}
	install mozc/src/xcodebuild/Release/libuim-mozc.so \
		${dest}/${fwdir}/pkglib/plugin/
	install scm/mozc*.scm ${dest}/${fwdir}/share/uim/

	# put into uim build dir too
	install mozc/src/xcodebuild/Release/libuim-mozc.so \
		${uim_build_dir}/uim/
	install scm/mozc*.scm ${uim_build_dir}/scm/

	# install server
	mkdir -p ${dest}/${mozc}
	rsync -auv mozc/src/xcodebuild/Release/MozcConverter.app \
		${dest}/${mozc}/

	mkdir -p ${dest}/${launchagentdir}
	cp -p mozc/src/mac/org.mozc.inputmethod.Japanaes.Converter.plist \
		${dest}/${launchagentdir}
fi
